#include <iostream>
#include <vector>

using namespace std;

// Structure to represent an item
struct Item {
    int weight;
    int value;

    Item(int weight, int value) : weight(weight), value(value) {}
};

// Function to solve the 0-1 Knapsack problem using dynamic programming
int knapsack(int capacity, const vector<Item>& items) {
    int n = items.size();

    // Create a 2D table to store the maximum values for subproblems
    vector<vector<int>> dp(n + 1, vector<int>(capacity + 1, 0));

    // Fill the table in a bottom-up manner
    for (int i = 1; i <= n; i++) {
        for (int j = 1; j <= capacity; j++) {
            // Check if the current item can be included in the knapsack
            if (items[i - 1].weight <= j) {
                // Decide whether to include the current item or not
                dp[i][j] = max(items[i - 1].value + dp[i - 1][j - items[i - 1].weight], dp[i - 1][j]);
            } else {
                // Skip the current item as its weight exceeds the capacity
                dp[i][j] = dp[i - 1][j];
            }
        }
    }

    // Return the maximum value that can be obtained
    return dp[n][capacity];
}

int main() {
    int capacity = 50;

    // Create items with weight and value
    vector<Item> items;
    items.emplace_back(10, 60);
    items.emplace_back(20, 100);
    items.emplace_back(30, 120);

    int maxValue = knapsack(capacity, items);

    cout << "Maximum value that can be obtained: " << maxValue << endl;

    return 0;
}
