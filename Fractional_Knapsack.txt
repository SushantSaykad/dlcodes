#include <iostream>
#include <vector>
#include <algorithm>

using namespace std;

// Structure to represent an item
struct Item {
    int weight;
    int value;

    Item(int weight, int value) : weight(weight), value(value) {}
};

// Comparison function for sorting items by value/weight ratio in descending order
bool compareItems(const Item& item1, const Item& item2) {
    double ratio1 = static_cast<double>(item1.value) / item1.weight;
    double ratio2 = static_cast<double>(item2.value) / item2.weight;
    return ratio1 > ratio2;
}

// Function to solve the fractional knapsack problem
double fractionalKnapsack(int capacity, const vector<Item>& items) {
    // Sort items by value/weight ratio in descending order
    vector<Item> sortedItems = items;
    sort(sortedItems.begin(), sortedItems.end(), compareItems);

    double totalValue = 0.0;
    int currentWeight = 0;

    // Iterate over the sorted items and add them to the knapsack
    for (const Item& item : sortedItems) {
        if (currentWeight + item.weight <= capacity) {
            // Take the whole item
            totalValue += item.value;
            currentWeight += item.weight;
        } else {
            // Take a fraction of the item
            double remainingCapacity = capacity - currentWeight;
            totalValue += (remainingCapacity / item.weight) * item.value;
            break;
        }
    }

    return totalValue;
}

int main() {
    int capacity = 50;

    // Create items with weight and value
    vector<Item> items;
    items.emplace_back(10, 60);
    items.emplace_back(20, 100);
    items.emplace_back(30, 120);

    double maxValue = fractionalKnapsack(capacity, items);

    cout << "Maximum value that can be obtained: " << maxValue << endl;

    return 0;
}
